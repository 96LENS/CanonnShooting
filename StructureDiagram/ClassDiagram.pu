@startuml CannonShooting
title CannonShooting ClassMap

/'
オブジェクト指向のポイント
ドメイン(業務の関心事)のデータとロジックを一緒にしてオブジェクト単位でまとめる技法
手続き型はトップダウン、オブジェクト指向はパーツを作って関係を構築していくボトムアップ

1登場人物の整理 (業務の関心事を洗い出す)
ヒト(業務活動の当事者)：プレイヤー・敵
モノ(人が業務を遂行するときの関心の対象)：大砲・大砲の弾・エネミー、制限時間・スコア・HP
コト(事象)：大砲とエネミーの衝突、大砲の弾とエネミーの衝突

2各々の関心事を説明する
'/

'大砲のロジックをどのようにMonoBehaviourのメインルーチンに繋げるか (MonoBehaviourが何らかの形で知っている必要がある)
'Animationファイルの管理・再生制御をどのように行うか
'BarrelとLowerCarriageのドメインロジックがどのようにTransfromを知っているようにするか

' キャノン
Package Cannnon{

    class CannonManager{
        - List<CannonBase> _cannon
        + bool AddCannon()
        + bool RemoveCannon()
        + ICannon GetCannon()
        --
        + void FixedUpdate()
        + void Update()
        + void LateUpdate()
    }
    CannonManager "1"-->"*" CannonBase : 生成時に登録 >

    '機能の使用を提供するインターフェース
    '機能を呼ぶ場合はこのインターフェースを通して呼ぶ
    interface ICannon{
    }

    class CannonBase{
        - GameObject _root
    }
    CannonBase .up.|> ICannon

    class Cannon {
        - CannonBase _cannonBase
        - void Movement()
        - void Attack()
    }
    Cannon -up-|> CannonBase
    Cannon *--> Barrel
    Cannon *--> LowerCarriage

    class LowerCarriage{
        - Transform LowerCarriage
        + void Rotate()
    }

    class Barrel{
        - Transform Barrel
        + void Rotate()
    }

}

'弾
Package Bullet{
    '弾の属性のEnumeration
    enum eBulletType<<short>>{
        NORMAL
        MAGNUM
        POISON
        PARALYSIS
    }

    ' 弾クラスの管理
    class BulletManager{
        - List<BulletBase> _bulletList
        - int _bulletMax
        + bool AddBullet()
        + bool RemoveBullet()
        + Bullet GetBullet()
        --
        + void FixedUpdate()
        + void Update()
        + void LateUpdate()
    }
    BulletManager -down-> BulletBase : 生成時に登録 >

    '弾のアクセス保証クラス
    interface IBullet{
    }

    '弾の基礎クラス
    class BulletBase{
        - string Id
        - eBulletType _bulletType
        - GameObject _root
        - RigidBody _rigidBody
    }
    BulletBase .up.|> IBullet
    BulletBase -left-> eBulletType

    class BulletNormal{
    }
    BulletNormal -up-|> BulletBase

    class BulletPoison{
    }
    BulletPoison -up-|> BulletBase

    class BulletParalysis{
    }
    BulletParalysis -up-|> BulletBase

    class BulletMagnum{
    }
    BulletMagnum -up-|> BulletBase
}

'コマンド
Package Command{

    'コマンドの管理クラス
    class CommandManager{
        - List<ICommand> _commandList
        ---
        + void ExecuteAllCommand()
        ---
        + void FixedUpdate()
        + void Update()
        + void LateUpdate()
    }
    CommandManager -down-> ICommand : 管理 >

    ' Commandのアクセスインターフェース
    interface ICommand{
        void Execute()
    }

    ' コマンドの基礎クラス
    class CommandBase{
        + void Execute()
    }
    CommandBase .up.|> ICommand

    'キャノン関連のコマンド
    class CannonCommand{
        + class RotateBarrel
        + class RotateLowerCarriage
    }
    CannonCommand -up-|> CommandBase
    
    '弾関連のコマンド
    class BulletCommand{
        + class Hit
    }
    BulletCommand -up-|> CommandBase

    '生成関連のコマンド
    class CreateCommand{
        + class CreateCannon
        + class CreateBullet
        + class CreateEnemy
    }
    CreateCommand -up-|> CommandBase

    '削除関連のコマンド
    class DestroyCommand{

    }
    DestroyCommand -up-|> CommandBase
}

' 敵
Package Enemy{

    '敵の管理クラス
    class EnemyManager{
        - List<EnemyBase> _enemyList
        + bool AddEnemy(EnemyBase enemy)
        + bool RemoveEnemy(string id)
        + IEnemy GetEnemy(string id)
        --
        + void FixedUpdate()
        + void Update()
        + void LateUpdate()
    }
    EnemyManager -down-> EnemyBase : 生成時に登録 >

    enum eEnemyType{

    }

    '敵のアクセス保証インターフェース
    interface IEnemy{
        + string ID
        + eEnemyType EnemyType
        + GameObject Root
        + int HitPoint
    }

    ' 敵の基礎クラス
    class EnemyBase{
    }
    EnemyBase .up.|> IEnemy
    EnemyBase -left-> eEnemyType

    '各種敵定義クラス
    class Enemy{

    }
    Enemy -up-|> EnemyBase
}

' コンテナ
Package Container{

    'コンテナの基礎クラス
    abstract ContainerBase{
    }

    'キャノンのGameObjectアクセス保証コンテナ
    class CannonContainer{
    }
    CannonContainer -up-|> ContainerBase

    '弾のGameObjectアクセス保証コンテナ
    class BulletContainer{
    }
    BulletContainer -up-|> ContainerBase
}

Package Manager{

    '生成したGameObjectの管理クラス
    class ModelManager{
        - Dictionary<string, GameObject> _modelList
        + void Instantiate()
        + void Destroy()
    }

    ' Prefabの管理クラス
    class PrefabManager{
        - List<PrefabWorker> _loadPrefabList
        + void LoadPrefab()
        + GameObject Instantiate()
    }
    PrefabManager +-down- PrefabWorker : 管理

    ' 管理されるPrefab定義クラス
    class PrefabWorker{
        + GameObject Prefab
        + int ReferenceCount
        + void AddReferenceCount()
        + void SubReferenceCount()
    }
}

Package Damage{

    ' ダメージ定義クラスへのアクセス権限
    Interface IDamage{

    }

    class Damage{
        
    }
}

Package HitPoint{

}

Package Score{

}

Package TimeLimit{

}

Package Utility{

    Interface BaseSystem{
        IEnumerator Initialize()
        void FixedUpdate()
        void Update()
        void LateUpdate()
        IEnumerator Termination()
    }
}
@enduml