@startuml CannonShooting

'プレイヤー

namespace Process{
    'ゲームの進行管理
    class GameProcessManager{
        - List<> _processList
        - void Awake()
        - void OnEnable()
        - void FixedUpdate()
        - void Update()
        - void LateUpdate()
        - void OnDisable()
        - void OnDestroy()
    }
    GameProcessManager -up-> Utility.SingletonMonoBehaviour
    GameProcessManager --> IGameProcess

    'ゲーム進行管理を行う管理対象
    interface IGameProcess{
        void Initialize()
        void FixedUpdate()
        void Update()
        void LateUpdate()
        void Destroy()
    }

    'インゲームのプロセス
    class MainProcess{
        + override Intialize()
        + override FixedUpdate()
        + override Update()
        + override LateUpdate()
        + override Destroy()
    }
    MainProcess .up.|> IGameProcess
}

namespace Command{

    'コマンド管理クラス
    class CommandManager{
        - List<> _commandList
        - void ExecuteAllCommand()
    }
    CommandManager -up-> Utility.Singleton
    CommandManager -down-|> ICommand

    'コマンド管理単位
    Interface ICommand{
        void Execute()
    }

    'コマンド基礎クラス
    class CommandBase{
        + void Execute()
    }
    CommandBase .up.|> ICommand

    class CannonCommand{
    }
    CannonCommand -up-|> CommandBase

    class CreateCommand{
    }
    CreateCommand -up-|> CommandBase
}

namespace Resource{

    'プロジェクト内のすべてのリソースを管理担当
    class ResourceManager{
        - List<> _objectList
        + override Initialize()
        + override Destroy()
        + bool IsExistObject(int id)
        + void DestroyResource(int id)
        + GameObject GetObject(int id)
    }
    ResourceManager -up-|> Utility.Singleton
    ResourceManager --> IObject

    'プロジェクト内のリソース管理単位
    'すべてのオブジェクトのIDを保証
    Interface IObject{
        - GetID()
    }

    'リソースの読み込み管理クラス
    class FileLoader{
        - private string _filePath
        + GameObject void LoadAsyncPrefab(string )
        + Texture void LoadAsyncTexture()
    }
    FileLoader -right-> ResourceManager : 追加 >
    
    enum ObjectType{
        Bullet
        Cannon
        Enemy
    }
}

namespace Cannon{
        'キャノン
    class Cannon{
        - int _id
        - int _hitPoint
        - float energyPoint
        - Transform _cannonTrsf
        + void GetID()
        + void CalcHitPoint(int damagePoint)
        + bool IsEnergyPointMax()
        + bool SetEnergyPointZero()
    }
    Cannon .up.|> Resource.IObject

    class PanoramacRotator{
    }
    Cannon --> PanoramacRotator
    Cannon --> TiltRotator

    class TiltRotator{
    }
}

namespace Bullet{

    '弾の基礎クラス
    class BulletBase{
        - int _id
        - Transform _bulletTrsf
    }
    BulletBase .up.|> Resource.IObject

    '通常弾定義クラス
    class NormalBullet{
    }
    NormalBullet -up-|> BulletBase

    'マグナム弾定義クラス
    class MagunumBullet{
    }
    MagunumBullet -up-|> BulletBase

    '痺れ弾定義クラス
    class NumbBullet{
    }
    NumbBullet -up-|> BulletBase

    '毒弾定義クラス
    class PoisonBullet{
    }
    PoisonBullet -up-|> BulletBase
}

namespace Enemy{

    class EnemyBase{
        - int _hitPoint
        - int _offenssitivePower
        - int _deffenssitivePower
        + abstract CalcHitPoint(int damagePoint)
    }
    EnemyBase .up.|> Resource.IObject

    'ToDo 敵の定義はUnityのアセットを見ながら決める 
    class Slime{
        + override CalcHitPoint(int damagePoint)
    }
    Slime -up-|> EnemyBase
}


namespace Utility{
    '単一性を保証するためのクラス
    class Singleton{
        - T _instance
        - bool isInitialized
        - void CreateInstance()
        # virtual Initialize()
        # virtual Destroy()
    }

    '単一性を保証するためのクラス
    class SingletonMonoBehaviour<<MonoBehaviour>>{
        - T _instance
        - bool isInitialized
        # virtual Awake()
        # virtual Destroy()
    }
}

namespace Extension{
    'コレクションにNullか要素数0の判定クラスがないので定義
    class ICollectionExtension{
        + bool IsNullOrEmpty()
    }
}



@enduml