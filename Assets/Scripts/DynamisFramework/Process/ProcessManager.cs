#define PROCESS_MANAGER_DEBUG
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using DynamisFramework.Utility;

namespace DynamisFramework
{
    namespace Process
    {
        /// <summary>
        /// アプリケーションの進行管理クラス
        /// </summary>
        public class ProcessManager : SingletonMonoBehaviour<ProcessManager>
        {
            //=====================================================================================================================
            // 内部クラス・列挙型定義
            //=====================================================================================================================

            //=====================================================================================================================
            // 定数
            //=====================================================================================================================

            //=====================================================================================================================
            // 変数
            //=====================================================================================================================
            private BaseProcess _currentProcess = null;

            //=====================================================================================================================
            // プロパティ
            //=====================================================================================================================
            /// <summary> 現在のプロセスを取得 </summary>
            public BaseProcess CurrentProcess => _currentProcess;

            //=====================================================================================================================
            // コンストラクタ
            //=====================================================================================================================

            //=====================================================================================================================
            // MonoBehaviour関数
            //=====================================================================================================================

            /// <summary>
            /// 初期化
            /// </summary>
            protected override void Awake()
            {
                base.Awake();
                _Initialize();
            }

            /// <summary>
            /// 物理等の不定期更新
            /// </summary>
            private void FixedUpdate()
            {
                if (_currentProcess == null)
                {
                    return;
                }
                _currentProcess.FixedUpdate();
            }

            /// <summary>
            /// 毎フレームの更新
            /// </summary>
            private void Update()
            {
                if(_currentProcess == null)
                {
                    return;
                }
                _currentProcess.Update();
            }

            /// <summary>
            /// Update後の更新
            /// </summary>
            private void LateUpdate()
            {
                if (_currentProcess == null)
                {
                    return;
                }
                _currentProcess.LateUpdate();
            }

            /// <summary>
            /// 削除 (アプリケーション終了と同時に呼び出し)
            /// </summary>
            protected override void OnDestroy()
            {
                _currentProcess = null;
                base.OnDestroy();
            }

            //=====================================================================================================================
            // Private関数
            //=====================================================================================================================
            private void _Initialize()
            {
                
            }

            //=====================================================================================================================
            // Public関数
            //=====================================================================================================================

            /// <summary>
            /// ルートとなるプロセスを追加時のみ使用。
            /// ※ エントリーポイントからの呼び出しのみ。
            /// </summary>
            public void SetCurrentProcess(BaseProcess process)
            {
                _currentProcess = process;
            }

        } // MonoBehaviourprocessManager
    }//namespace Process
}//namespace CannonShooting